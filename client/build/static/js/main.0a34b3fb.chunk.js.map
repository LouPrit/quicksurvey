{"version":3,"sources":["pages/signup.js","pages/home.js","pages/login.js","pages/create.js","pages/mysurveys.js","pages/notfound.js","pages/viewsurvey.js","pages/previewSurvey.js","pages/statsPage.js","components/navigation.js","App.js","serviceWorker.js","index.js"],"names":["URL","SignupPage","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","accForm","username","password","email","firstName","lastName","textChanged","bind","assertThisInitialized","createAccount","document","title","e","name","target","setState","assign","defineProperty","value","_this2","preventDefault","axios","post","concat","then","res","reply","data","exists","alert","console","log","window","location","catch","error","react_default","a","createElement","className","id","href","onSubmit","type","placeholder","onChange","autoComplete","required","Component","AllSurveysPage","SurveyList","retrievedData","surveys","length","map","survey","index","key","react_router_dom","to","get","LoginPage","loginForm","login","token","localStorage","getItem","decoded","decode","exp","Date","now","setItem","verified","verifyToken","setLogInState","disabled","CreatePage","description","questions","quesType","question","options","Question","addQuestion","removeQuestion","saveSurvey","Number","questionsCopy","JSON","parse","stringify","findIndex","i","toConsumableArray","onClick","defaultChecked","item","questionLayout","questionArray","splice","statsObject","split","option","_this3","createStatsObject","headers","Authorization","getElementById","reset","MySurveysPage","deleteSurvey","btnid","surveyID","attributes","getNamedItem","delete","newState","filter","NotFound","ViewSurveys","section","CreateOptions","params","URLSearchParams","search","user","sectionindex","finalFormData","answers","$","serializeArray","patch","x","formToJSON","PreviewSurvey","statsArr","quickStyle","textAlign","listStyle","padding","margin","StatisticsPage","MainBit","keys","includes","push","GenerateStats","style","logout","removeItem","MainNav","logState","loggedIn","App","status","navigation","react_router","path","exact","component","MainPage","render","pages_mysurveys","pages_create","pages_viewsurvey","previewSurvey","statsPage","pages_signup","pages_login","Boolean","hostname","match","ReactDOM","src_App_0","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.0a34b3fb.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport '../styles/signup.css';\r\nimport axios from 'axios';\r\n\r\nlet URL = (process.env.NODE_ENV === 'production') ? 'https://quicksurvey-react.herokuapp.com' : 'http://localhost:3001';\r\n\r\nclass SignupPage extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            accForm: {\r\n                username: '',\r\n                password: '',\r\n                email: '',\r\n                firstName: '',\r\n                lastName: ''\r\n            }\r\n        };\r\n\r\n        //binds\r\n        this.textChanged = this.textChanged.bind(this);\r\n        this.createAccount = this.createAccount.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        document.title = \"Signup for free!\";\r\n    }\r\n\r\n    textChanged(e) {\r\n        const name = e.target.name;\r\n        this.setState(\r\n            {\r\n                accForm: Object.assign({}, this.state.accForm, { [name]: e.target.value })\r\n            }\r\n        );\r\n    }\r\n\r\n    /**\r\n    * Saves our new account to the database\r\n    */\r\n    createAccount(e) {\r\n        e.preventDefault(); //Prevent the form from refreshing page when submit is pressed\r\n        axios.post(`${URL}/account/`, (this.state.accForm))\r\n            .then((res) => {\r\n                let reply = res.data;\r\n\r\n                if (reply.exists) {\r\n                    if (reply.username === this.state.accForm.username) {\r\n                        alert(\"Username already registered\");\r\n                    }\r\n                    else if (reply.email === this.state.accForm.email) {\r\n                        alert(\"Email already registered\");\r\n                    }\r\n                } else {\r\n                console.log(\"Account successfully created\");\r\n                console.log(res)\r\n                this.setState ({\r\n                    accForm: {\r\n                        username: '',\r\n                        password: '',\r\n                        email: '',\r\n                        firstName: '',\r\n                        lastName: ''\r\n                    }\r\n                });\r\n                alert(\"Account successfully created\");\r\n                window.location.assign(`${URL}/login`);\r\n            }\r\n            })\r\n            .catch((error) => {\r\n                console.error(error)\r\n            })\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"App-main\">\r\n                <h1 id=\"signupHeading\">Create your free account</h1>\r\n                <h2>Already have account? <a href=\"login\">Log In</a></h2>\r\n\r\n                <form className=\"signupForm\" onSubmit={this.createAccount}>\r\n                    <p>~ Create an account ~</p>\r\n                    <input className=\"signupInput\" type=\"text\" name=\"username\" placeholder=\"Username\" onChange={this.textChanged} value={this.state.accForm.username} autoComplete=\"off\" required />\r\n                    <input className=\"signupInput\" type=\"password\" name=\"password\" placeholder=\"Password\" onChange={this.textChanged} value={this.state.accForm.password} autoComplete=\"off\" required />\r\n                    <input className=\"signupInput\" type=\"email\" name=\"email\" placeholder=\"Email\" onChange={this.textChanged} value={this.state.accForm.email} autoComplete=\"on\" required />\r\n                    <div className=\"nameSection\">\r\n                    <input className=\"signupInput\" type=\"text\" id=\"firstName\" name=\"firstName\" placeholder=\"First Name\" onChange={this.textChanged} value={this.state.accForm.firstName} autoComplete=\"on\" required />\r\n                    <input className=\"signupInput\" type=\"text\" id=\"lastName\" name=\"lastName\" placeholder=\"Last Name\" onChange={this.textChanged} value={this.state.accForm.lastName} autoComplete=\"on\" required />\r\n                    </div>\r\n                    <input className=\"signupInput btn btn-dark\" type=\"submit\" name=\"submit\" value=\"Create Account\" />\r\n                </form>\r\n\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SignupPage;","import React, { Component } from 'react';\r\nimport '../styles/home.css';\r\nimport axios from 'axios';\r\nimport { Link } from 'react-router-dom';\r\n\r\nlet URL = (process.env.NODE_ENV === 'production') ? 'https://quicksurvey-react.herokuapp.com' : 'http://localhost:3001';\r\n\r\nclass AllSurveysPage extends Component { \r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            retrievedData: false,\r\n            surveys: []\r\n        };\r\n\r\n        this.SurveyList = this.SurveyList.bind(this);\r\n    }\r\n\r\n\r\n    componentDidMount() {\r\n        document.title = \"All Surveys\";\r\n\r\n        axios.get(`${URL}/survey/`) //Make a get request for all surveys\r\n            .then(reply => this.setState(\r\n                {\r\n                    retrievedData: true,\r\n                    surveys: reply.data\r\n                }\r\n            ))\r\n            .catch(error => console.log(error))\r\n    }\r\n\r\n    /**\r\n     * Displays a list of survey titles that the user created, displays a loading screen or no surveys found screen if not.\r\n     */\r\n    SurveyList = () => {\r\n        if (!this.state.retrievedData) {\r\n            return (\r\n                <h1>Retrieving surveys...</h1>\r\n            );\r\n        } else if (this.state.surveys.length === 0) {\r\n            return (\r\n                <h1>No surveys found!</h1>\r\n            );\r\n        } else {\r\n            return (\r\n                this.state.surveys.map((survey, index) => <li key={index} className=\"buttonList\"><Link className=\"allSurveysPageButt btn btn-dark\" to={`/viewsurvey/?id=${survey.id}&user=${survey.username}`}>{survey.title} by {survey.username}</Link></li>)\r\n            );\r\n        }\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"App-main\">\r\n                <h1 id=\"loginHeading\">All Surveys</h1>\r\n                <ul className=\"survey-list-main\">\r\n                    <this.SurveyList />\r\n                </ul>\r\n            </div>\r\n\r\n        );\r\n    }\r\n}\r\n\r\nexport default AllSurveysPage;\r\n\r\n","import React, { Component } from 'react';\r\nimport '../styles/login.css';\r\nimport axios from 'axios';\r\nimport decode from 'jwt-decode'\r\n\r\nlet URL = (process.env.NODE_ENV === 'production') ? 'https://quicksurvey-react.herokuapp.com' : 'http://localhost:3001';\r\nlet RedirectURL = (process.env.NODE_ENV === 'production') ? 'https://quicksurvey-react.herokuapp.com' : 'http://localhost:3000';\r\n\r\nclass LoginPage extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            loginForm: {\r\n                username: '',\r\n                password: ''\r\n            }\r\n        };\r\n\r\n        this.textChanged = this.textChanged.bind(this);\r\n        this.login = this.login.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        document.title = \"Log in to your account\";\r\n    }\r\n\r\n    textChanged(e) {\r\n        const name = e.target.name;\r\n        this.setState(\r\n            {\r\n                loginForm: Object.assign({}, this.state.loginForm, { [name]: e.target.value })\r\n            }\r\n        );\r\n    }\r\n\r\n    verifyToken() {\r\n        const token = localStorage.getItem(\"qs_auth_token\"); //Find our token and assign to const 'token'\r\n        if (token) {\r\n            const decoded = decode(token); //Decode our token\r\n            if (decoded.exp > Date.now() / 1000) { //If the token expiry date is greater than current time/date the token is valid\r\n                return decoded.username;\r\n            } else {  //Otherwise it's not valid\r\n                return false;\r\n            }\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n\r\n    login(e) {\r\n        e.preventDefault();\r\n        axios.get(`${URL}/account/${this.state.loginForm.username}/${this.state.loginForm.password}`)\r\n            .then(reply => {\r\n                if (reply.data.token) { //If token exists in reply\r\n                    localStorage.setItem('qs_auth_token', reply.data.token); //Store token in local storage with the name 'qs_auth_token'\r\n                    const verified = this.verifyToken(); //Verify token is valid\r\n                    if (verified) {\r\n                        console.log(\"Logging in\");\r\n                        this.props.setLogInState(true, verified);\r\n                        this.setState({\r\n                            loginForm: {\r\n                                username: '',\r\n                                password: ''\r\n                            }\r\n                        });\r\n                        window.location.assign(`${RedirectURL}/`);\r\n                    } else {\r\n                        console.log(\"Error: Looks like token was invalid\");\r\n                    }\r\n                } else if (reply.data.disabled) { //If account is disabled\r\n                    alert(\"Account disabled\");\r\n                } else { //If no token is in the reply than the username or password is incorrect\r\n                    alert(\"Incorrect Username or Password\");\r\n                }\r\n            })\r\n            .catch(error => console.log(error));\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"App-main\">\r\n                <h1 id=\"loginHeading\">Log in to your account</h1>\r\n\r\n                <form className=\"loginForm\" onSubmit={this.login}>\r\n                    <p>~ Log in~</p>\r\n                    <input className=\"loginInput\" type=\"text\" name=\"username\" placeholder=\"Username\" onChange={this.textChanged} value={this.state.loginForm.username} autoComplete=\"off\" required />\r\n                    <input className=\"loginInput\" type=\"password\" name=\"password\" placeholder=\"Password\" onChange={this.textChanged} value={this.state.loginForm.password} autoComplete=\"off\" required />\r\n                    <input className=\"loginInput btn btn-dark\" type=\"submit\" name=\"submit\" value=\"Log in\" />\r\n                </form>\r\n\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default LoginPage;","import React, { Component } from 'react';\r\nimport '../styles/create.css';\r\nimport axios from 'axios';\r\n\r\nlet URL = (process.env.NODE_ENV === 'production') ? 'https://quicksurvey-react.herokuapp.com' : 'http://localhost:3001';\r\n\r\nclass CreatePage extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            title: '',\r\n            description: '',\r\n            username: props.username,\r\n            id: Date.now(), //Provides us with a unique ID as Date.now returns the milliseconds since January 1, 1970 00:00:00\r\n            questions: [\r\n                {\r\n                    id: 0,\r\n                    quesType: 'radio',\r\n                    question: '',\r\n                    options: ''\r\n                }\r\n            ]\r\n        };\r\n\r\n        this.Question = this.Question.bind(this);\r\n        this.textChanged = this.textChanged.bind(this);\r\n        this.addQuestion = this.addQuestion.bind(this);\r\n        this.removeQuestion = this.removeQuestion.bind(this);\r\n        this.saveSurvey = this.saveSurvey.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        document.title = 'Create a survey';\r\n    }\r\n\r\n    /**\r\n     * Called by the 'onChange' handler for adding a title, description, question or options\r\n     * @param {*} e - Event passed from handler\r\n     */\r\n    textChanged(e) {\r\n        const id = Number(e.target.id); //Grab the ID of our target and convert to number\r\n        const name = e.target.name; //Get the 'name' attribute of our target (either 'question' or 'options')\r\n\r\n        //If we are typing inside title or description field do this \r\n        if (name === 'title' || name === 'description') {\r\n            this.setState(\r\n                {\r\n                    [name]: e.target.value\r\n                }\r\n            );\r\n            //If we are typing inside question or options field do this \r\n        } else if (name === \"question\" || name === \"options\") {\r\n            let questionsCopy = JSON.parse(JSON.stringify(this.state.questions)); //Clone a complete copy of the 'questions' array from State\r\n            //Add the text the user typed into the questionsCopy object, using the id and name\r\n            questionsCopy[questionsCopy.findIndex(i => i.id === id)][name] = e.target.value;\r\n            //Set the state to our newly altered questions object.\r\n            this.setState(\r\n                {\r\n                    questions: questionsCopy\r\n                }\r\n            );\r\n            //If none of the others match, the user can only be changing the question type (radio/checkbox).. handle that here.\r\n        } else {\r\n            let questionsCopy = JSON.parse(JSON.stringify(this.state.questions));\r\n            questionsCopy[questionsCopy.findIndex(i => i.id === id)][\"quesType\"] = e.target.value;\r\n            this.setState(\r\n                {\r\n                    questions: questionsCopy\r\n                }\r\n            );\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Adds a new object into the questions array\r\n     */\r\n    addQuestion(e) {\r\n        e.preventDefault();\r\n        this.setState(\r\n            {\r\n                questions: [\r\n                    ...this.state.questions,\r\n                    {\r\n                        id: Date.now(),\r\n                        quesType: 'radio',\r\n                        question: '',\r\n                        options: ''\r\n                    }\r\n                ]\r\n            }\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Layout for each of the question / options boxes\r\n     * @param {*} id - this allows us to tie together the inputs / buttons etc to the correct list item.\r\n     */\r\n    questionLayout(id) {\r\n        return (\r\n            <li className=\"insideQuestionDiv\" key={id} id={id}>\r\n                <a href=\" \" onClick={this.removeQuestion} className=\"shrinkAnchorMinus\">\r\n                    <i className=\"far fa-minus-square fa-2x\" id={id}></i>\r\n                </a>\r\n                <div className=\"questionType\" onChange={this.textChanged} >\r\n                    <p className=\"boldLabel\">Style:</p>\r\n                    <label><input type=\"radio\" name={id} id={id} value=\"radio\" defaultChecked=\"true\" /> Radio (Only one option can be chosen)</label>\r\n                    <label><input type=\"radio\" name={id} id={id} value=\"checkbox\" /> Checkbox (Multiple opttions can be chosen)</label>\r\n                </div>\r\n                <div id='quesDiv'>\r\n                    <label id='#quesLabel' className=\"boldLabel\">Question: </label>\r\n                    <input type='text' id={id} name=\"question\" className='quesInput' placeholder='Question' onChange={this.textChanged} required={true} />\r\n                </div>\r\n                <div id='optionsDiv'>\r\n                    <label id='#optionsLabel' className=\"boldLabel\">Options:</label>\r\n                    <input type='text' id={id} name=\"options\" className='optionsInput' placeholder='Comma seperated e.g. (Option 1, Option 2)' onChange={this.textChanged} required={true} />\r\n                </div>\r\n            </li>\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Iterates through the questions array and creates a visual layout for each one along with a unique id\r\n     */\r\n    Question() {\r\n        return (\r\n            this.state.questions.map((item) => this.questionLayout(item.id))\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Triggered when a user clicks a '-' button to remove a question from the survey\r\n     */\r\n    removeQuestion(e) {\r\n        e.preventDefault(); //Using anchor tags to prevents page from refreshing / URL altering\r\n        const id = Number(e.target.id); //Get the ID of the button we pressed (the buttons ID matches the li ID)\r\n        if (id !== 0) {\r\n            const questionArray = JSON.parse(JSON.stringify(this.state.questions)); //Clone a complete copy of the 'questions' array from State\r\n            questionArray.splice(questionArray.findIndex(i => i.id === id), 1);\r\n            this.setState(\r\n                {\r\n                    questions: [...questionArray]\r\n                }\r\n            );\r\n        } else {\r\n            alert(\"Unable to remove\");\r\n        }\r\n    }\r\n\r\n    /**\r\n * Creates the object that is sent to the database for tracking the choices users have made on different surveys\r\n */\r\n    createStatsObject(survey) {\r\n\r\n        if (survey.id) {\r\n            //This is how our object starts\r\n            let statsObject = {\r\n                'id': survey.id\r\n            }\r\n\r\n            //Adds a new key to our 'statsObject' for each of the questions in the survey and assigns and empty object to it. e.g.  'Favourite Colour?: {}'\r\n            survey.questions.map(item => statsObject[item.question] = {\r\n            });\r\n\r\n            //Iterates through each of the questions in our survey and splits the options for each question into an array before iterating through each of the options.\r\n            //Each of the options are then assigned to the appropriate question inside our 'statsObject' and assigned the starting value of 0\r\n            survey.questions.map(item =>\r\n                item.options.split(', ').map(option =>\r\n                    statsObject[item.question][option] = 0\r\n                )\r\n            );\r\n\r\n            return (statsObject);\r\n        } else {\r\n            return null;\r\n        }\r\n\r\n    }\r\n\r\n    //Posts the survey object to the database\r\n    saveSurvey(e) {\r\n        e.preventDefault();\r\n        const statsObject = this.createStatsObject(this.state);\r\n\r\n        if (statsObject !== null) {\r\n            const token = localStorage.getItem(\"qs_auth_token\"); //Find our token and assign to const 'token'\r\n            axios.post(`${URL}/survey/create/`, [this.state, statsObject], { headers: { \"Authorization\": `Bearer ${token}` } }) //Make a post request sending our data and authorization header\r\n                .then(reply => {\r\n                    alert(\"Survey saved!\");\r\n                    document.getElementById(\"myForm\").reset();\r\n                    this.setState(\r\n                        {\r\n                            title: '',\r\n                            description: '',\r\n                            username: this.props.username,\r\n                            id: Date.now(), //Provides us with a unique ID as Date.now returns the milliseconds since January 1, 1970 00:00:00\r\n                            questions: [\r\n                                {\r\n                                    id: 0,\r\n                                    quesType: 'radio',\r\n                                    question: '',\r\n                                    options: ''\r\n                                }\r\n                            ]\r\n                        }\r\n                    );\r\n                }\r\n                ).catch((error) => {\r\n                    alert(\"Failed, see console for more info\");\r\n                    console.log(error)\r\n                });\r\n        } else {\r\n            console.log(\"FAILED, NO ID\");\r\n        }\r\n    }\r\n\r\n    //The render method for the page\r\n    render() {\r\n        return (\r\n            <div className='App-main'>\r\n                <h1 className='createHeading'>Create a survey</h1>\r\n                <div className='createSurveyMain'>\r\n                    <form id=\"myForm\" className='createSurveyForm' onSubmit={this.saveSurvey}>\r\n                        <div id='titleDiv'>\r\n                            <label id='#titleLabel' className=\"boldLabel\">Survey title:</label>\r\n                            <input type='text' name=\"title\" id='titleInput' placeholder='Survey Title' onChange={this.textChanged} required={true} />\r\n                        </div>\r\n                        <div id='descriptionDiv'>\r\n                            <label id='#descriptionLabel' className=\"boldLabel\">Description:</label>\r\n                            <input type='text' name=\"description\" id='descriptionInput' placeholder='Description' onChange={this.textChanged} required={true} />\r\n                        </div>\r\n                        <div className=\"questionDiv\">\r\n                            <a href=' ' onClick={this.addQuestion} className=\"shrinkAnchorPlus\">\r\n                                <i className=\"far fa-plus-square fa-2x\" id=\"plusIcon\"></i>\r\n                            </a>\r\n                            <ul className=\"questionList\">\r\n                                <this.Question />\r\n                            </ul>\r\n                        </div>\r\n                        <button type=\"submit\" className=\"loginInput btn btn-dark\">Save Survey</button>\r\n                    </form>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nexport default CreatePage;","import React, { Component } from 'react';\r\nimport '../styles/mysurveys.css';\r\nimport axios from 'axios';\r\nimport { Link } from 'react-router-dom';\r\n\r\nlet URL = (process.env.NODE_ENV === 'production') ? 'https://quicksurvey-react.herokuapp.com' : 'http://localhost:3001';\r\n\r\nclass MySurveysPage extends Component { //Username is passed to this component from 'App.js'\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            retrievedData: false,\r\n            surveys: []\r\n        };\r\n\r\n        this.SurveyList = this.SurveyList.bind(this);\r\n        this.deleteSurvey = this.deleteSurvey.bind(this);\r\n    }\r\n\r\n\r\n    componentDidMount() {\r\n        document.title = \"My Surveys\";\r\n\r\n        const token = localStorage.getItem(\"qs_auth_token\"); //Find our token and assign to const 'token'\r\n        axios.get(`${URL}/survey/${this.props.username}`, { headers: { \"Authorization\": `Bearer ${token}` } }) //Make a get request sending our authorization header\r\n            .then(reply => this.setState(\r\n                {\r\n                    retrievedData: true,\r\n                    surveys: reply.data\r\n                }\r\n            ))\r\n            .catch(error => console.log(error))\r\n    }\r\n\r\n    deleteSurvey(e) {\r\n        const surveyID = e.target.attributes.getNamedItem('btnid').value;\r\n\r\n        const token = localStorage.getItem(\"qs_auth_token\"); //Find our token and assign to const 'token'\r\n        axios.delete(`${URL}/survey/delete/${surveyID}`, { headers: { \"Authorization\": `Bearer ${token}` } })\r\n        .then(reply => {\r\n            const newState = this.state.surveys.filter(survey => survey.id !== Number(surveyID));\r\n            this.setState({\r\n                surveys: newState\r\n            }, () => {\r\n                console.log(\"Survey deleted\");\r\n            });\r\n        }\r\n            )\r\n        .catch(error => console.log(error))\r\n    }\r\n\r\n    /**\r\n     * Displays a list of survey titles that the user created, displays a loading screen or no surveys found screen if not.\r\n     */\r\n    SurveyList = () => {\r\n        if (!this.state.retrievedData) {\r\n            return (\r\n                <h1>Retrieving surveys...</h1>\r\n            );\r\n        } else if (this.state.surveys.length === 0) {\r\n            return (\r\n                <h1>No surveys found!</h1>\r\n            );\r\n        } else {\r\n            return (\r\n                this.state.surveys.map((survey, index) => <li key={index} className=\"buttonList\"><Link className=\"survListButt btn btn-dark\" to={`/preview/?id=${survey.id}&user=${this.props.username}`}>Preview - {survey.title}</Link><Link className=\"statsButton btn btn-info\" to={`/stats/?id=${survey.id}`}>Stats</Link><button className=\"deleteButtons btn btn-danger\" onClick={this.deleteSurvey} btnid={survey.id} >Delete</button></li>)\r\n            );\r\n        }\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"App-main\">\r\n                <h1 id=\"loginHeading\">My Surveys</h1>\r\n                <ul className=\"survey-list-main\">\r\n                    <this.SurveyList />\r\n                </ul>\r\n            </div>\r\n\r\n        );\r\n    }\r\n}\r\n\r\nexport default MySurveysPage;\r\n\r\n","import React from \"react\";\r\n\r\nfunction NotFound() {\r\n    return(\r\n        <div>\r\n            <h1>Page not found!</h1>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default NotFound;","import React, { Component } from 'react';\r\nimport '../styles/viewsurvey.css';\r\nimport axios from 'axios';\r\nimport $ from 'jquery';\r\n\r\nlet URL = (process.env.NODE_ENV === 'production') ? 'https://quicksurvey-react.herokuapp.com' : 'http://localhost:3001';\r\n\r\nclass ViewSurveys extends Component { //Username is passed to this component from 'App.js'\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n        };\r\n        this.section = this.section.bind(this);\r\n        this.CreateOptions = this.CreateOptions.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        document.title = \"View Survey\";\r\n\r\n        const params = new URLSearchParams(window.location.search); //'window.location.search' creates a string containing a '?' followed by the parameters of the URL.\r\n        const id = params.get(\"id\"); //ID of the survey\r\n        const user = params.get(\"user\")\r\n\r\n        axios.get(`${URL}/survey/${user}/${id}`) //Make a get request sending our authorization header\r\n            .then(data => {\r\n                this.setState(\r\n                    data.data[0]\r\n                );\r\n            })\r\n            .catch(error => console.log(error));\r\n    }\r\n\r\n    /**\r\n * Returns the full section for each survey segment (Question + options)\r\n */\r\n    section() {\r\n        if (this.state.title) {\r\n            return (\r\n                this.state.questions.map((item, index) =>\r\n                    <div key={index} className=\"surveySection\">\r\n                        <h1 className=\"sectionTitle\">{item.question}</h1>\r\n                        <div className=\"formSection\">\r\n                            <this.CreateOptions sectionindex={index} type={item.quesType} question={item.question} />\r\n                        </div>\r\n                    </div>\r\n                )\r\n            );\r\n        } else {\r\n            return (<h1>Loading...</h1>);\r\n        }\r\n    }\r\n\r\n    /**\r\n * Returns a div containing input / label for each of the options provided\r\n * @param {*} props Props passed from 'Section' function to this function\r\n */\r\n    CreateOptions(props) {\r\n        return (this.state.questions[props.sectionindex].options.split(', ').map((item, index) =>\r\n            <div className=\"surveyDiv\" key={props.sectionindex + index}>\r\n                <label className=\"surveyLabel\" >{item}</label>\r\n                <input className=\"surveyInput\" type={props.type} name={props.question} value={item} />\r\n            </div>\r\n        ));\r\n    }\r\n\r\n    /**\r\n     * Uses JQuery to convert the user input on the form into a JSON object that can be used.\r\n     * @param {*} e - Event passed from button.\r\n     */\r\n    formToJSON(e) {\r\n        e.preventDefault();\r\n\r\n        const id = this.state.id;\r\n\r\n        let formData = $(\"#surveyForm\").serializeArray(); //Use JQuery to encode a set of form elements as an array of names and values.\r\n\r\n        const finalFormData = {\r\n            'id': id,\r\n            'answers': formData \r\n        };\r\n\r\n        axios.patch(`${URL}/update/`, (finalFormData))\r\n        .then(x => {\r\n            console.log(\"Form submitted successfully\");\r\n            document.getElementById('surveyForm').reset();\r\n            alert(\"Survey submitted successfully\");\r\n        })\r\n        .catch(error => console.log(error));\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"App-main\">\r\n                <h1 id=\"title\">{this.state.title}</h1>\r\n                <p id=\"descript\">{this.state.description}</p>\r\n                <form onSubmit={this.formToJSON.bind(this)} id=\"surveyForm\">\r\n                    <this.section />\r\n                    <button type=\"submit\" id=\"surveyButton\" className=\"btn btn-dark\" >Submit</button>\r\n                </form>\r\n            </div>\r\n\r\n        );\r\n    }\r\n}\r\n\r\nexport default ViewSurveys;\r\n\r\n","import React, { Component } from 'react';\r\nimport '../styles/viewsurvey.css';\r\nimport axios from 'axios';\r\n\r\nlet URL = (process.env.NODE_ENV === 'production') ? 'https://quicksurvey-react.herokuapp.com' : 'http://localhost:3001';\r\n\r\nclass PreviewSurvey extends Component { //Username is passed to this component from 'App.js'\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n        };\r\n        this.section = this.section.bind(this);\r\n        this.CreateOptions = this.CreateOptions.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        document.title = \"Preview Survey\";\r\n\r\n        const params = new URLSearchParams(window.location.search); //'window.location.search' creates a string containing a '?' followed by the parameters of the URL.\r\n        const id = params.get(\"id\"); //ID of the survey\r\n        const user = params.get(\"user\")\r\n\r\n        axios.get(`${URL}/survey/${user}/${id}`) //Make a get request sending our authorization header\r\n            .then(data => {\r\n                this.setState(\r\n                    data.data[0]\r\n                );\r\n            })\r\n            .catch(error => console.log(error));\r\n    }\r\n\r\n    /**\r\n * Returns the full section for each survey segment (Question + options)\r\n */\r\n    section() {\r\n        if (this.state.title) {\r\n            return (\r\n                this.state.questions.map((item, index) =>\r\n                    <div key={index} className=\"surveySection\">\r\n                        <h1 className=\"sectionTitle\">{item.question}</h1>\r\n                        <div className=\"formSection\">\r\n                            <this.CreateOptions sectionindex={index} type={item.quesType} question={item.question} />\r\n                        </div>\r\n                    </div>\r\n                )\r\n            );\r\n        } else {\r\n            return (<h1>Loading...</h1>);\r\n        }\r\n    }\r\n\r\n    /**\r\n * Returns a div containing input / label for each of the options provided\r\n * @param {*} props Props passed from 'Section' function to this function\r\n */\r\n    CreateOptions(props) {\r\n        return (this.state.questions[props.sectionindex].options.split(', ').map((item, index) =>\r\n            <div className=\"surveyDiv\" key={props.sectionindex + index}>\r\n                <label className=\"surveyLabel\" >{item}</label>\r\n                <input className=\"surveyInput\" type={props.type} disabled={true} />\r\n            </div>\r\n        ));\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"App-main\">\r\n                <h1 id=\"title\">{this.state.title}</h1>\r\n                <p id=\"descript\">{this.state.description}</p>\r\n                <form id=\"surveyForm\">\r\n                    <this.section />\r\n                    <button id=\"surveyButton\" className=\"btn btn-dark\" disabled={true} >Submit</button>\r\n                </form>\r\n            </div>\r\n\r\n        );\r\n    }\r\n}\r\n\r\nexport default PreviewSurvey;\r\n\r\n","import React, { Component } from 'react';\r\nimport '../styles/stats.css';\r\nimport axios from 'axios';\r\n\r\nlet URL = (process.env.NODE_ENV === 'production') ? 'https://quicksurvey-react.herokuapp.com' : 'http://localhost:3001';\r\n\r\nlet statsArr = [];\r\n\r\nlet quickStyle = {\r\n    'textAlign': 'center',\r\n    'listStyle': 'none',\r\n    'padding': 0,\r\n    'margin': 0\r\n}\r\n\r\nclass StatisticsPage extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n        };\r\n\r\n        this.MainBit = this.MainBit.bind(this);\r\n    }\r\n\r\n\r\n    componentDidMount() {\r\n        document.title = \"Stats Page\";\r\n        /**\r\n         * Set the stats Array back to empty when component mounts, \r\n         * this is because if a user navigates away from this component to another component this array stays populated\r\n         * causing the information on the page to appear x2, x3, x4 increasing with each subsequent visit\r\n         * This is likely because we aren't storing this array inside the component state\r\n         */\r\n        statsArr = []; \r\n\r\n        const params = new URLSearchParams(window.location.search); //'window.location.search' creates a string containing a '?' followed by the parameters of the URL.\r\n        const id = params.get(\"id\"); //ID of the survey\r\n\r\n\r\n        const token = localStorage.getItem(\"qs_auth_token\"); //Find our token and assign to const 'token'\r\n        axios.get(`${URL}/update/${id}`, { headers: { \"Authorization\": `Bearer ${token}` } }) //Make a get request for survey stats\r\n            .then(reply => this.setState(\r\n                reply.data[0]\r\n            ))\r\n            .catch(error => console.log(error))\r\n    }\r\n\r\n    GenerateStats(props) {\r\n        return (\r\n            Object.keys(statsArr[props.i].options).map((key, index) =>\r\n                <div key={index}><p>{key}: {statsArr[props.i].options[key]}</p></div>\r\n            )\r\n        );\r\n    }\r\n\r\n    MainBit() {\r\n        Object.keys(this.state).filter(key => !key.includes(\"id\") && !key.includes(\"__v\")).map(x =>\r\n            statsArr.push({\r\n                question: x,\r\n                options: this.state[x]\r\n            })\r\n        );\r\n        return (\r\n            statsArr.map((x, index) => <li key={index}>\r\n                <h1>{x.question}</h1>\r\n                <this.GenerateStats i={index} />\r\n            </li>)\r\n        );\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"App-main\">\r\n                <h1>Survey Statistics</h1>\r\n                <ul style={quickStyle}>\r\n                    <this.MainBit />\r\n                </ul>\r\n            </div>\r\n\r\n        );\r\n    }\r\n}\r\n\r\nexport default StatisticsPage;\r\n\r\n","import React from \"react\";\r\nimport { Link } from 'react-router-dom';\r\n\r\nlet URL = (process.env.NODE_ENV === 'production') ? 'https://quicksurvey-react.herokuapp.com' : 'http://localhost:3000';\r\n\r\nfunction MainNav(props) {\r\n    if (props.logState.loggedIn) {\r\n        return (\r\n            <div className=\"App-header-background\">\r\n                <div className=\"App-header\">\r\n                    <div>\r\n                        <p className=\"App-title\">QuickSurvey</p>\r\n                    </div>\r\n                    <nav>\r\n                        <ul className=\"App-nav\">\r\n                            <li>\r\n                                <Link className=\"link\" to=\"/\">Surveys</Link>\r\n                            </li>\r\n                            <li>\r\n                                <Link className=\"link\" to=\"/mysurveys\">My Surveys</Link>\r\n                            </li>\r\n                            <li>\r\n                                <Link className=\"link\" to=\"/create\">Create Surveys</Link>\r\n                            </li>\r\n                        </ul>\r\n                    </nav>\r\n                    <nav>\r\n                        <ul className=\"App-nav-login\">\r\n                            <li>\r\n                                <button className=\"logoutButton\" onClick={logout}>Logout ({props.logState.username})</button>\r\n                            </li>\r\n                        </ul>\r\n                    </nav>\r\n                </div>\r\n            </div>\r\n        );\r\n    } else {\r\n        return (\r\n            <div className=\"App-header-background\">\r\n                <div className=\"App-header\">\r\n                    <div>\r\n                        <p className=\"App-title\">QuickSurvey</p>\r\n                    </div>\r\n                    <nav>\r\n                        <ul className=\"App-nav\">\r\n                            <li>\r\n                                <Link className=\"link\" to=\"/\">Surveys</Link>\r\n                            </li>\r\n                            <li>\r\n                                <Link className=\"link\" to=\"/mysurveys\">My Surveys</Link>\r\n                            </li>\r\n                            <li>\r\n                                <Link className=\"link\" to=\"/create\">Create Surveys</Link>\r\n                            </li>\r\n                        </ul>\r\n                    </nav>\r\n                    <nav>\r\n                        <ul className=\"App-nav-login\">\r\n                            <li>\r\n                                <Link className=\"link\" to=\"/login\">Login</Link>\r\n                            </li>\r\n                            <li className=\"signupLi\">\r\n                                <Link className=\"link\" to=\"/signup\">Signup</Link>\r\n                            </li>\r\n                        </ul>\r\n                    </nav>\r\n                </div>\r\n            </div>);\r\n    }\r\n}\r\n\r\nfunction logout() {\r\n    localStorage.removeItem('qs_auth_token');\r\n    window.location.assign(`${URL}/login`);\r\n}\r\n\r\nexport default MainNav;","import React, { Component } from 'react';\nimport './App.css';\nimport { BrowserRouter as Router, Route, Switch, Redirect } from \"react-router-dom\";\nimport decode from 'jwt-decode';\n\n//pages\nimport SignupPage from \"./pages/signup\";\nimport MainPage from \"./pages/home\";\nimport LoginPage from \"./pages/login\";\nimport CreatePage from \"./pages/create\";\nimport MySurveysPage from \"./pages/mysurveys\"\nimport NotFound from \"./pages/notfound\";\nimport ViewSurveys from \"./pages/viewsurvey\";\nimport PreviewSurvey from \"./pages/previewSurvey\";\nimport StatisticsPage from \"./pages/statsPage\";\n\n//components\nimport MainNav from \"./components/navigation\"\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      status: {\n        loggedIn: false,\n        username: ''\n      }\n    };\n\n    this.setLogInState = this.setLogInState.bind(this);\n  }\n\n  componentDidMount() {\n    const user = this.verifyToken();\n    if (user) {\n      this.setLogInState(true, user);\n    } else {\n      console.log(\"No valid log in token\");\n    }\n  }\n\n  verifyToken() {\n    const token = localStorage.getItem(\"qs_auth_token\"); //Find our token and assign to const 'token'\n    if (token) {  //If we found a token\n      const decoded = decode(token); //Decode our token\n      if (decoded.exp > Date.now() / 1000) { //If the token expiry date is greater than current time/date the token is valid\n        return decoded.username;\n      } else {  //Otherwise it's not valid\n        return false;\n      }\n    } else { //Return false as we didn't find a token\n      return false;\n    }\n  }\n\n  setLogInState = (loggedIn, username) => {\n    console.log(\"Setting log in state\");\n    this.setState({\n      status: {\n        loggedIn: loggedIn,\n        username: username\n      }\n    });\n  }\n\n\n  render() {\n    return (\n      <Router>\n        <div className=\"App\">\n          <MainNav logState={this.state.status} />\n          <Switch>\n            <Route path=\"/\" exact component={MainPage} />\n            <Route path=\"/mysurveys\" render={(props) => (\n              this.state.status.loggedIn ? (<MySurveysPage username={this.state.status.username} {...props} />)\n                : (<Redirect to='/login' />)\n            )} />\n            <Route path=\"/create\" render={(props) => (\n              this.state.status.loggedIn ? (<CreatePage username={this.state.status.username} {...props} />)\n                : (<Redirect to='/login' />)\n            )} />\n            <Route path=\"/viewsurvey\" render={(props) => <ViewSurveys username={this.state.status.username} {...props} />} /> {/* Route used to view specific surveys */}\n            <Route path=\"/preview\" render={(props) => (\n              this.state.status.loggedIn ? (<PreviewSurvey username={this.state.status.username} {...props} />)\n                : (<Redirect to='/login' />)\n            )} /> {/* Route used to preview survey */}\n            <Route path=\"/stats\" render={(props) => (\n              this.state.status.loggedIn ? (<StatisticsPage username={this.state.status.username} {...props} />)\n                : (<Redirect to='/login' />)\n            )} /> {/* Route used to view survey statistics */}\n            <Route path=\"/signup\" render={(props) => <SignupPage  {...props} />} /> {/*Passing props to the 'SignupPage component, uses 'render' instead of 'component'*/}\n            <Route path=\"/login\" render={(props) => <LoginPage setLogInState={this.setLogInState} {...props} />} />\n            <Route path=\"*\" component={NotFound} /> {/*Catches any routes that don't match the above and sends them to the NotFound page*/}\n          </Switch>\n        </div>\n      </Router>\n    );\n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}